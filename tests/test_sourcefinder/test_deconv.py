import unittest

from tkp.sourcefinder.deconv import deconv

class DecovolutionTestCase(unittest.TestCase):
    """
    Known-good values as calculated by deconv.f from classic AIPS.
    """
    def test_known_good(self):
        # Each entry is a pair of (argument), (result) tuples.
        known_good = [
            ((1, 1, 0, 1, 1, 0), (0.0, 0.0, 0.0, 0)),
            ((1, 1, 0, 1, 1, 180), (0.0, 0.0, 0.0, 0)),
            ((1, 1, 0, 1, 1, 90), (0.0, 0.0, 0.0, 0)),
            ((1, 1, 0, 1, 1, 45), (0.0, 0.0, 0.0, 0)),
            ((2., 2., 0, 1, 1, 0), (1.7320508075688772, 1.7320508075688772, 0.0, 0)),
            ((2., 2., 0, 1, 1, 180),(1.7320508075688772, 1.7320508075688772, 0.0, 0)),
            ((2., 2., 0, 1, 1, 90), (1.7320508075688772, 1.7320508075688772, 90.0, 0)),
            ((2., 2., 0, 1, 1, 45), (1.7320508075688772, 1.7320508075688772, 45.0, 0)),
            ((2.7, 1.7, 0, 1, 1, 0), (2.507987240796891, 1.3747727084867518, 0.0, 0)),
            ((2.7, 1.7, 0, 1, 1, 180), (2.507987240796891, 1.3747727084867518, 0.0, 0)),
            ((2.7, 1.7, 0, 1, 1, 90), (2.507987240796891, 1.3747727084867518, 0.0, 0)),
            ((2.7, 1.7, 0, 1, 1, 45), (2.507987241303295, 1.3747727075629217, 0.0, 0)),
            ((2.7, 1.7, 10, 1, 1, 0), (2.507987240796891, 1.3747727084867518, 10.0, 0)),
            ((2.7, 1.7, 20, 1, 1, 180), (2.507987240796891, 1.3747727084867518, 20.0, 0)),
            ((2.7, 1.7, 30, 1, 1, 90), (2.507987240796891, 1.3747727084867516, 30.0, 0)),
            ((2.7, 1.7, 40, 1, 1, 45), (2.507987240796891, 1.3747727084867518, 40.0, 0))
        ]
        for args, result in known_good:
            for i, val in enumerate(deconv(*args)):
                self.assertAlmostEqual(val, result[i])
